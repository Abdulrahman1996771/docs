{
  "swagger": "2.0",
  "info": {
    "title": "openapi/openapi.proto",
    "version": "0.1",
    "description": "# Overview\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus eget massa ut purus luctus hendrerit vel tempor nisl. In congue felis at nunc congue, vehicula semper eros blandit. In placerat vestibulum dui eu suscipit. Nulla elementum varius vehicula. Fusce purus mauris, molestie quis nibh sed, mattis vestibulum quam. Integer non erat nibh. Suspendisse velit nulla, mollis at mi quis, tempor mollis erat. Aliquam pretium mattis ante id aliquam. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Proin fringilla tortor ut magna sagittis, eu iaculis tortor ornare. Ut luctus turpis et turpis convallis ultrices. Sed rhoncus, felis quis porttitor venenatis, est urna pharetra odio, posuere fringilla odio lorem sit amet mi. Vestibulum ac bibendum erat, sit amet molestie odio. Donec rutrum maximus ligula ut vulputate. Quisque consectetur luctus ligula, sed bibendum odio pretium et.\n\n# Get Started\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus eget massa ut purus luctus hendrerit vel tempor nisl. In congue felis at nunc congue, vehicula semper eros blandit. In placerat vestibulum dui eu suscipit. Nulla elementum varius vehicula. Fusce purus mauris, molestie quis nibh sed, mattis vestibulum quam. Integer non erat nibh.\n\n## Get an API key\n\nCurabitur pellentesque tempor ornare. Curabitur at pulvinar urna, eget consequat augue. Mauris eu massa ornare, placerat eros et, mollis tortor. Sed ornare tortor mi, quis vestibulum neque finibus at.\n\n**Note:** Donec in magna pulvinar, porttitor ex eu, sollicitudin urna. Nam tempus, mauris sed sagittis pretium, turpis urna laoreet neque, eu molestie arcu purus quis nibh.\n\n## Make your first API call\n\nMauris vitae nisi justo. Integer consequat enim metus, vitae efficitur nibh tincidunt vitae. Sed pharetra ex et gravida posuere. In auctor nisi sed justo sodales, et cursus dui pharetra. Nulla mattis leo ex, a faucibus dolor molestie semper. Vivamus nibh tortor, rutrum tristique dolor sed, viverra finibus tellus. Sed non scelerisque velit, sed condimentum enim.\n\n```shell\nsome example code\n```\n\n## View the response\n\nMauris nec ultrices eros. Donec eleifend varius blandit.\n\n# Authentication\n\nQuisque ultricies id lectus pharetra rhoncus. Phasellus in nulla dui. Integer iaculis arcu eget ipsum aliquet lobortis. In hac habitasse platea dictumst. In tempor magna et vulputate vestibulum. Nullam dapibus felis id elit facilisis, vitae mollis enim malesuada. Sed velit risus, dictum id ipsum quis, tristique aliquet ipsum. Sed a libero mattis, posuere ex a, facilisis metus. Suspendisse potenti. Sed non libero risus.\n\n<SecurityDefinitions />\n\n# Rate Limiting\n\nSed pharetra ex et gravida posuere. In auctor nisi sed justo sodales, et cursus dui pharetra. Nulla mattis leo ex, a faucibus dolor molestie semper. Vivamus nibh tortor, rutrum tristique dolor sed, viverra finibus tellus. Sed non scelerisque velit, sed condimentum enim.\n\n# Status Codes\n\nMauris vitae nisi justo. Integer consequat enim metus, vitae efficitur nibh tincidunt vitae.",
  },
  "tags": [
    {
      "name": "CMService"
    },
    {
      "name": "DPService"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/cm/foo": {
      "get": {
        "operationId": "CMService_Foo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/openapiFooResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "CMService"
        ]
      }
    },
    "/v1/dp/bar": {
      "get": {
        "operationId": "DPService_Bar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/openapiBarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "DPService"
        ]
      }
    }
  },
  "definitions": {
    "openapiBarResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "description": "this is BarResponse",
      "title": "BarResponse"
    },
    "openapiFooResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "description": "this is FooResponse",
      "title": "FooResponse"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "externalDocs": {
    "description": "CM",
    "url": "https://example.com"
  }
}
